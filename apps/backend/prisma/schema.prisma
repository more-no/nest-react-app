// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  username           String     @unique @db.VarChar(20)
  email              String     @unique
  fullname           String?    @unique @db.VarChar(20)
  picture_url        String?    @db.VarChar(200)
  bio                String?    @db.VarChar(300)
  date_registration  DateTime   @default(now()) @db.Date
  password_hash      String     @db.VarChar(80)
  refresh_token      String?    @db.VarChar(80)
  post_count         Int        @default(0)
  comment_count      Int        @default(0)
  session            Session[]
  personal_data      PersonalData[]
  user_role          UserRole[]
  post               Post[]
  group_post         UserOnGroupPost[]

    @@map("users")
}

model PersonalData {
  id                 Int        @id @default(autoincrement())
  user_id            Int        @map("user_id") @unique
  first_name         String?     @db.VarChar(20)
  last_name          String?     @db.VarChar(20)
  age                Int?
  nationality        String?     @db.VarChar(20)
  user               User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Post {
  id                 Int        @id @default(autoincrement())
  user_id            Int        @map("user_id")
  title              String 	  @db.VarChar(40)
  body               String     @db.VarChar(300)
  created_at         DateTime   @default(now()) @db.Timestamp(3)
  updated_at         DateTime   @default(now()) @db.Timestamp(3) @updatedAt
  user               User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model GroupPost {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(30)
  body               String     @db.VarChar(300)
  created_at         DateTime   @default(now()) @db.Timestamp(3)
  updated_at         DateTime   @default(now()) @db.Timestamp(3) @updatedAt
  user               UserOnGroupPost[]
}

model UserOnGroupPost {
  user_id           Int       @map("user_id")
  group_post_id     Int       @map("group_post_id")
  group_post        GroupPost @relation(fields: [group_post_id], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_post_id])
}

model Session {
  id                   Int      @id @default(autoincrement())
  token                String   @unique
  expiry_timestamp     DateTime @map("expiry_timestamp") @db.Timestamp(3)
  user_id              Int      @map("user_id")
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Role {
  id              Int        @id @default(autoincrement())
  role_name       RolesEnum
  description     String?
  role            UserRole[]
}

enum RolesEnum {
  Admin
  Editor
  User
}

model UserRole {
  user_id Int     @map("user_id")
  role_id Int     @map("role_id")
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}
